[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 173 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -5] = [[fp + -4] + 8];
[ap + -4] = [[fp + -4] + 9];
[ap + -3] = [[fp + -4] + 10];
[ap + -2] = [[fp + -4] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 13], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 14];
[ap + -5] = [[fp + -4] + 15];
[ap + -4] = [[fp + -4] + 16];
[ap + -3] = [[fp + -4] + 17];
[ap + -2] = [[fp + -4] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 14) %}
[ap + 0] = [[fp + -4] + 20], ap++;
jmp rel 109 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 19], ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 21];
[ap + -5] = [[fp + -4] + 22];
[ap + -4] = [[fp + -4] + 23];
[ap + -3] = [[fp + -4] + 24];
[ap + -2] = [[fp + -4] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 21) %}
[ap + 0] = [[fp + -4] + 27], ap++;
jmp rel 78 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 28];
[ap + -5] = [[fp + -4] + 29];
[ap + -4] = [[fp + -4] + 30];
[ap + -3] = [[fp + -4] + 31];
[ap + -2] = [[fp + -4] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 28) %}
[ap + 0] = [[fp + -4] + 34], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 35];
[ap + -5] = [[fp + -4] + 36];
[ap + -4] = [[fp + -4] + 37];
[ap + -3] = [[fp + -4] + 38];
[ap + -2] = [[fp + -4] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 35) %}
[ap + 0] = [[fp + -4] + 41], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = [ap + -1] + 360, ap++;
[ap + 0] = [fp + -4] + 42, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 44, ap++;
[ap + 0] = [[fp + -4] + 42], ap++;
[ap + 0] = [[fp + -4] + 43], ap++;
jmp rel 11;
ap += 8;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = [ap + -1] + 11320, ap++;
[ap + 0] = [fp + -4] + 37, ap++;
[ap + 0] = [[fp + -4] + 35], ap++;
[ap + 0] = [[fp + -4] + 36], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -4] + 26], ap++;
[ap + 0] = [ap + -1] + 22450, ap++;
[ap + 0] = [fp + -4] + 30, ap++;
[ap + 0] = [[fp + -4] + 28], ap++;
[ap + 0] = [[fp + -4] + 29], ap++;
jmp rel 11;
ap += 23;
[ap + 0] = [[fp + -4] + 19], ap++;
[ap + 0] = [ap + -1] + 33870, ap++;
[ap + 0] = [fp + -4] + 23, ap++;
[ap + 0] = [[fp + -4] + 21], ap++;
[ap + 0] = [[fp + -4] + 22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 34;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -1] + 45460, ap++;
[ap + 0] = [fp + -4] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [[fp + -4] + 15], ap++;
ret;
ap += 41;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1] + 56690, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1598;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3149;
[ap + 0] = [ap + -1] + 3148, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 68700 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 68700, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 68700, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -297;
[ap + 0] = [ap + -66] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1550;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 1539;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1520;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 6750 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204706, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 294;
[fp + -6] = [ap + 0] + 6750, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 227 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1330;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2880;
[ap + 0] = [ap + -1] + 2879, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 114660, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel 1316;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1273;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 2345;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 4040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5550, ap++;
call rel 1230;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1210;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1121;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 2672;
[ap + 0] = [ap + -1] + 2671, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 62150 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 62150, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 62150, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 2209;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1073;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 1062;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1043;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1005;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 2556;
[ap + 0] = [ap + -1] + 2555, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 2364;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 902;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 891;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 853;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 2404;
[ap + 0] = [ap + -1] + 2403, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 2221;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 750;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 739;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 182;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 652;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2202;
[ap + 0] = [ap + -1] + 2201, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14720, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 125;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 1983;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 509;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 497;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 477;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 438;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1989;
[ap + 0] = [ap + -1] + 1988, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 1765;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 1745;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 259;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 248;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 210;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1761;
[ap + 0] = [ap + -1] + 1760, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 1537;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 1517;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 20;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1058 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[fp + -5] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 35;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 120;
call rel 1507;
[ap + 0] = [ap + -1] + 1506, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 99560, ap++;
call rel 1407;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -136] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -142], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -5] + 280, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 968 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -9] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -9] + 1], ap++;
[ap + -5] = [[fp + -9] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 925 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -9] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 891 if [ap + -7] != 0;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -18] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 815 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 774 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 742 if [ap + -7] != 0;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -41] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
[fp + -5] = [[ap + -20] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 6], ap++;
jmp rel 677 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 5], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 310;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 277 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -17] + 0], ap++;
[ap + 3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -22] + 2];
jmp rel 234 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -17] + 0];
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 201 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 163 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 86;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 71 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
jmp rel 308;
ap += 20;
[ap + 0] = [[ap + -54] + 12], ap++;
[ap + 0] = [ap + -1] + 13000, ap++;
[ap + 0] = [ap + -56] + 16, ap++;
[ap + 0] = [[ap + -57] + 14], ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
jmp rel 11;
ap += 27;
[ap + 0] = [[ap + -54] + 5], ap++;
[ap + 0] = [ap + -1] + 24330, ap++;
[ap + 0] = [ap + -56] + 9, ap++;
[ap + 0] = [[ap + -57] + 7], ap++;
[ap + 0] = [[ap + -58] + 8], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33] + 34910, ap++;
jmp rel 8;
ap += 32;
[ap + 0] = [ap + -44] + 2, ap++;
[ap + 0] = [ap + -37] + 35280, ap++;
call rel 975;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 35;
call rel 944;
[ap + 0] = [ap + -54] + 3, ap++;
[ap + 0] = [ap + -49] + 35630, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 55;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -2] + 38340, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = [[ap + -69] + 6], ap++;
[ap + 0] = [[ap + -70] + 7], ap++;
jmp rel 30;
ap += 47;
call rel 919;
[ap + 0] = [ap + -75] + 3, ap++;
[ap + 0] = [ap + -61] + 47480, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[ap + -75] + 4], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 50190, ap++;
[ap + 0] = [ap + -78] + 8, ap++;
[ap + 0] = [[ap + -79] + 6], ap++;
[ap + 0] = [[ap + -80] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 326 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -17] + 0], ap++;
[ap + 3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -22] + 2];
jmp rel 283 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -17] + 0];
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 250 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 212 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 135;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 120 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 87 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 58 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 706;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -21] = [[ap + -20] + 1];
[ap + -5] = [[ap + -20] + 2];
[ap + -4] = [[ap + -20] + 3];
[ap + -3] = [[ap + -20] + 4];
[ap + -2] = [[ap + -20] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -25] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -25] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
[ap + 0] = [[ap + -28] + 9], ap++;
ret;
ap += 20;
[ap + 0] = [[ap + -54] + 12], ap++;
[ap + 0] = [ap + -1] + 12900, ap++;
[ap + 0] = [ap + -56] + 16, ap++;
[ap + 0] = [[ap + -57] + 14], ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
jmp rel 11;
ap += 27;
[ap + 0] = [[ap + -54] + 5], ap++;
[ap + 0] = [ap + -1] + 24230, ap++;
[ap + 0] = [ap + -56] + 9, ap++;
[ap + 0] = [[ap + -57] + 7], ap++;
[ap + 0] = [[ap + -58] + 8], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33] + 34810, ap++;
jmp rel 8;
ap += 32;
[ap + 0] = [ap + -44] + 2, ap++;
[ap + 0] = [ap + -37] + 35180, ap++;
call rel 618;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 35;
call rel 587;
[ap + 0] = [ap + -54] + 3, ap++;
[ap + 0] = [ap + -49] + 35530, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 55;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -2] + 38240, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = [[ap + -69] + 6], ap++;
[ap + 0] = [[ap + -70] + 7], ap++;
jmp rel 30;
ap += 47;
call rel 562;
[ap + 0] = [ap + -75] + 3, ap++;
[ap + 0] = [ap + -61] + 47380, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[ap + -75] + 4], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 50090, ap++;
[ap + 0] = [ap + -78] + 8, ap++;
[ap + 0] = [[ap + -79] + 6], ap++;
[ap + 0] = [[ap + -80] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
[ap + 0] = [[ap + -102] + 5], ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -2] + 62050, ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -106] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -108] + 7], ap++;
[ap + 0] = [[ap + -109] + 8], ap++;
ret;
ap += 85;
call rel 610;
[ap + 0] = [ap + -1] + 609, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 73620, ap++;
call rel 557;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -99] + [ap + -8], ap++;
[ap + 0] = [ap + -111], ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 77;
call rel 589;
[ap + 0] = [ap + -1] + 588, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 72730, ap++;
call rel 473;
[ap + 0] = [ap + -103] + 3, ap++;
[ap + 0] = [ap + -98] + [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 93;
[ap + 0] = [[ap + -114] + 4], ap++;
call rel 568;
[ap + 0] = [ap + -1] + 567, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 74880, ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -123] + 8, ap++;
[ap + 0] = [[ap + -124] + 6], ap++;
[ap + 0] = [[ap + -125] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -111], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 107;
call rel 543;
[ap + 0] = [ap + -1] + 542, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 87250, ap++;
call rel 497;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -122] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -129], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 99;
call rel 520;
[ap + 0] = [ap + -1] + 519, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 86360, ap++;
call rel 402;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -121] + [ap + -8], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 115;
[ap + 0] = [[ap + -126] + 4], ap++;
call rel 497;
[ap + 0] = [ap + -1] + 496, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 88510, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -136] + 8, ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [[ap + -138] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 133;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 469;
[ap + 0] = [ap + -1] + 468, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 101030, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 305 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 234;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 207 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 175 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 141 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 117 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
ap += 22;
call rel 290;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -31] + 23880, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -4] + 280, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -3] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 195;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -36] + 7];
[ap + -2] = [[ap + -36] + 8];
[ap + -6] = [[ap + -36] + 9];
[ap + -5] = [[ap + -36] + 10];
[ap + -4] = [[ap + -36] + 11];
[ap + -3] = [[ap + -36] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 7) %}
[ap + 0] = [[ap + -36] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 13], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -37] + 13], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -40] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 15], ap++;
[ap + 0] = [[ap + -43] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13180, ap++;
[ap + 0] = [ap + -40] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
ret;
ap += 26;
call rel 198;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34] + 24440, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 18;
call rel 95;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [ap + -33] + 23550, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 34;
[ap + 0] = [[ap + -49] + 4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2] + 25700, ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = [[ap + -53] + 6], ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 39;
call rel 163;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47] + 36550, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 36;
call rel 42;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -50] + 36180, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 51;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 38240, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 50270, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930490496575599150170734222081291576, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6396785288134949316111800291588441706688366, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel 16 if [fp + -11] != 0;
[ap + 0] = 626701365406341637835658603777811143746313620068960454872121503152110594199, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[ap + 0] = 1087103541478474879879001400220721863109046731347877639004353644914990305989, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 22262504451487240676641280457586393769316, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 517209913840849255812809201082740339747880606814214195930468, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1489367635952064142590622936951924, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7177729436381303449077456739251539561112948, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6214289900860935150703809029490, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
