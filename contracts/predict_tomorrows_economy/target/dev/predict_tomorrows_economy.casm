[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 173 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -5] = [[fp + -4] + 8];
[ap + -4] = [[fp + -4] + 9];
[ap + -3] = [[fp + -4] + 10];
[ap + -2] = [[fp + -4] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 13], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 14];
[ap + -5] = [[fp + -4] + 15];
[ap + -4] = [[fp + -4] + 16];
[ap + -3] = [[fp + -4] + 17];
[ap + -2] = [[fp + -4] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 14) %}
[ap + 0] = [[fp + -4] + 20], ap++;
jmp rel 109 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 19], ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 21];
[ap + -5] = [[fp + -4] + 22];
[ap + -4] = [[fp + -4] + 23];
[ap + -3] = [[fp + -4] + 24];
[ap + -2] = [[fp + -4] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 21) %}
[ap + 0] = [[fp + -4] + 27], ap++;
jmp rel 78 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 28];
[ap + -5] = [[fp + -4] + 29];
[ap + -4] = [[fp + -4] + 30];
[ap + -3] = [[fp + -4] + 31];
[ap + -2] = [[fp + -4] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 28) %}
[ap + 0] = [[fp + -4] + 34], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 35];
[ap + -5] = [[fp + -4] + 36];
[ap + -4] = [[fp + -4] + 37];
[ap + -3] = [[fp + -4] + 38];
[ap + -2] = [[fp + -4] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 35) %}
[ap + 0] = [[fp + -4] + 41], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = [ap + -1] + 360, ap++;
[ap + 0] = [fp + -4] + 42, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 44, ap++;
[ap + 0] = [[fp + -4] + 42], ap++;
[ap + 0] = [[fp + -4] + 43], ap++;
jmp rel 11;
ap += 8;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = [ap + -1] + 11320, ap++;
[ap + 0] = [fp + -4] + 37, ap++;
[ap + 0] = [[fp + -4] + 35], ap++;
[ap + 0] = [[fp + -4] + 36], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -4] + 26], ap++;
[ap + 0] = [ap + -1] + 22450, ap++;
[ap + 0] = [fp + -4] + 30, ap++;
[ap + 0] = [[fp + -4] + 28], ap++;
[ap + 0] = [[fp + -4] + 29], ap++;
jmp rel 11;
ap += 23;
[ap + 0] = [[fp + -4] + 19], ap++;
[ap + 0] = [ap + -1] + 33870, ap++;
[ap + 0] = [fp + -4] + 23, ap++;
[ap + 0] = [[fp + -4] + 21], ap++;
[ap + 0] = [[fp + -4] + 22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 34;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -1] + 45460, ap++;
[ap + 0] = [fp + -4] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [[fp + -4] + 15], ap++;
ret;
ap += 41;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1] + 56690, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 2119;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5705;
[ap + 0] = [ap + -1] + 5704, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 68700 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 68700, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 68700, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -297;
[ap + 0] = [ap + -66] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2071;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 2060;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 2041;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 6750 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204706, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 294;
[fp + -6] = [ap + 0] + 6750, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 227 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1851;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5436;
[ap + 0] = [ap + -1] + 5435, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 175690, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel 1837;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1794;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 3321;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 4040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5550, ap++;
call rel 1751;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1731;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 88;
[fp + -6] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1692;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5277;
[ap + 0] = [ap + -1] + 5276, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 163620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 34;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3231;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1638;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1626;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1537;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5123;
[ap + 0] = [ap + -1] + 5122, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 62150 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 62150, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 62150, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 4608;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1489;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 1478;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1459;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1421;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5007;
[ap + 0] = [ap + -1] + 5006, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 4763;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1318;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1307;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1269;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4855;
[ap + 0] = [ap + -1] + 4854, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 4620;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1166;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1155;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 182;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1068;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4653;
[ap + 0] = [ap + -1] + 4652, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14720, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 125;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 4382;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 925;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 913;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 893;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 854;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4440;
[ap + 0] = [ap + -1] + 4439, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 4164;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 4144;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 675;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 664;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 626;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4212;
[ap + 0] = [ap + -1] + 4211, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 3936;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 3916;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 447;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 436;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 247;
[fp + -6] = [ap + 0] + 3510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 204 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 180 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 348;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 3933;
[ap + 0] = [ap + -1] + 3932, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 125;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1293796366858164720360108159792708960508606548810239399096857724869737693871, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -17] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9] + 1300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 3653;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1960, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 205;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 193;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 173;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 134;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3720;
[ap + 0] = [ap + -1] + 3719, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1011307989842077537279700403360587208786236838515163525924107960475533593913, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 3503;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 20;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1513 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[fp + -5] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 35;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 182;
call rel 3542;
[ap + 0] = [ap + -1] + 3541, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 159970, ap++;
call rel 3399;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -198] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -204], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -5] + 280, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 1423 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -9] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -9] + 1], ap++;
[ap + -5] = [[fp + -9] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1380 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -9] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1346 if [ap + -7] != 0;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -18] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 1268 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1225 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1191 if [ap + -7] != 0;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -41] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
[fp + -5] = [[ap + -20] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 6], ap++;
jmp rel 1117 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 5], ap++;
[ap + 0] = 297572889287913156956330015608642265349819520091339214996607100188171254991, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -57] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 7];
[ap + -5] = [[ap + -36] + 8];
[ap + -4] = [[ap + -36] + 9];
[ap + -6] = [[ap + -36] + 10];
[fp + -4] = [[ap + -36] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 7) %}
[ap + 0] = [[ap + -36] + 13], ap++;
jmp rel 1040 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 14];
[ap + -4] = [[ap + -42] + 15];
[ap + -3] = [[ap + -42] + 16];
[ap + -2] = [[ap + -42] + 17];
[fp + -3] = [[ap + -42] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 14) %}
[ap + 0] = [[ap + -42] + 20], ap++;
jmp rel 1006 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 19], ap++;
[ap + 0] = [ap + -44] + 21, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 366;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 326 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -23] + 0], ap++;
[ap + 3] = [[ap + -24] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -28] + 2];
jmp rel 276 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -23] + 0];
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 236 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 191 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 107;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 85 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
jmp rel 364;
ap += 54;
[ap + 0] = [[ap + -88] + 12], ap++;
call rel 3062;
[ap + 0] = [ap + -1] + 3061, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48980, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -96] + 16, ap++;
[ap + 0] = [[ap + -97] + 14], ap++;
[ap + 0] = [[ap + -98] + 15], ap++;
jmp rel 18;
ap += 61;
[ap + 0] = [[ap + -88] + 5], ap++;
call rel 3044;
[ap + 0] = [ap + -1] + 3043, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60310, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -96] + 9, ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
[ap + 0] = [[ap + -98] + 8], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
call rel 3020;
[ap + 0] = [ap + -1] + 3019, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 70890, ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73] + [ap + -2], ap++;
jmp rel 15;
ap += 66;
call rel 3006;
[ap + 0] = [ap + -1] + 3005, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 71260, ap++;
[ap + 0] = [ap + -84] + 2, ap++;
[ap + 0] = [ap + -77] + [ap + -2], ap++;
call rel 2871;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
call rel 2982;
[ap + 0] = [ap + -1] + 2981, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 71610, ap++;
call rel 2823;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -89] + [ap + -8], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 89;
[ap + 0] = [[ap + -99] + 4], ap++;
call rel 2961;
[ap + 0] = [ap + -1] + 2960, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 74320, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -108] + 8, ap++;
[ap + 0] = [[ap + -109] + 6], ap++;
[ap + 0] = [[ap + -110] + 7], ap++;
jmp rel 44;
ap += 81;
call rel 2943;
[ap + 0] = [ap + -1] + 2942, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 83460, ap++;
call rel 2784;
[ap + 0] = [ap + -121] + 3, ap++;
[ap + 0] = [ap + -101] + [ap + -8], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 101;
[ap + 0] = [[ap + -109] + 4], ap++;
call rel 2917;
[ap + 0] = [ap + -1] + 2916, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 86170, ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -118] + 8, ap++;
[ap + 0] = [[ap + -119] + 6], ap++;
[ap + 0] = [[ap + -120] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 592 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -23] + 0], ap++;
[ap + 3] = [[ap + -24] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -28] + 2];
jmp rel 542 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -23] + 0];
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 502 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 457 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 373;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 351 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 311 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 275 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1011307989842077537279700403360587208786236838515163525924107960475533593913, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 5], ap++;
jmp rel 231 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 6], ap++;
[ap + 0] = [ap + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 190 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = 1293796366858164720360108159792708960508606548810239399096857724869737693871, ap++;
[ap + -1] = [[ap + -82] + 0];
[ap + -6] = [[ap + -82] + 1];
[ap + 0] = [[ap + -82] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -4] = [[ap + -20] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -22] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -19] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -7] = [[ap + -22] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92] + 3, ap++;
[ap + 0] = [ap + -25] + 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
[ap + -162] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 119 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -24] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 90;
[ap + 1] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1011307989842077537279700403360587208786236838515163525924107960475533593913, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -5] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[ap + -6] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -180], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 2447;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -32] + 7];
[ap + -2] = [[ap + -32] + 8];
[ap + -6] = [[ap + -32] + 9];
[ap + -5] = [[ap + -32] + 10];
[ap + -4] = [[ap + -32] + 11];
[ap + -3] = [[ap + -32] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32] + 7) %}
[ap + 0] = [[ap + -32] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -33] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 15], ap++;
[ap + 0] = [[ap + -40] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -33] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 13180, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [[ap + -40] + 8], ap++;
ret;
ap += 23;
call rel 2436;
[ap + 0] = [ap + -39] + 1, ap++;
[ap + 0] = [ap + -34] + 23670, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 35;
[ap + 0] = [[ap + -54] + 5], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2] + 25120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -58] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 7], ap++;
[ap + 0] = [[ap + -61] + 8], ap++;
ret;
ap += 29;
call rel 2479;
[ap + 0] = [ap + -1] + 2478, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 35520, ap++;
call rel 2329;
[ap + 0] = [ap + -59] + 3, ap++;
[ap + 0] = [ap + -50] + [ap + -8], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 45;
[ap + 0] = [[ap + -50] + 4], ap++;
call rel 2458;
[ap + 0] = [ap + -1] + 2457, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37670, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = [[ap + -60] + 6], ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 54;
[ap + 0] = [[ap + -88] + 12], ap++;
call rel 2432;
[ap + 0] = [ap + -1] + 2431, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48880, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -96] + 16, ap++;
[ap + 0] = [[ap + -97] + 14], ap++;
[ap + 0] = [[ap + -98] + 15], ap++;
jmp rel 18;
ap += 61;
[ap + 0] = [[ap + -88] + 5], ap++;
call rel 2414;
[ap + 0] = [ap + -1] + 2413, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60210, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -96] + 9, ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
[ap + 0] = [[ap + -98] + 8], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
call rel 2390;
[ap + 0] = [ap + -1] + 2389, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 70790, ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73] + [ap + -2], ap++;
jmp rel 15;
ap += 66;
call rel 2376;
[ap + 0] = [ap + -1] + 2375, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 71160, ap++;
[ap + 0] = [ap + -84] + 2, ap++;
[ap + 0] = [ap + -77] + [ap + -2], ap++;
call rel 2241;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
call rel 2352;
[ap + 0] = [ap + -1] + 2351, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 71510, ap++;
call rel 2193;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -89] + [ap + -8], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 89;
[ap + 0] = [[ap + -99] + 4], ap++;
call rel 2331;
[ap + 0] = [ap + -1] + 2330, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 74220, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -108] + 8, ap++;
[ap + 0] = [[ap + -109] + 6], ap++;
[ap + 0] = [[ap + -110] + 7], ap++;
jmp rel 44;
ap += 81;
call rel 2313;
[ap + 0] = [ap + -1] + 2312, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 83360, ap++;
call rel 2154;
[ap + 0] = [ap + -121] + 3, ap++;
[ap + 0] = [ap + -101] + [ap + -8], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 101;
[ap + 0] = [[ap + -109] + 4], ap++;
call rel 2287;
[ap + 0] = [ap + -1] + 2286, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 86070, ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -118] + 8, ap++;
[ap + 0] = [[ap + -119] + 6], ap++;
[ap + 0] = [[ap + -120] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 111;
[ap + 0] = [[ap + -154] + 19], ap++;
call rel 2261;
[ap + 0] = [ap + -1] + 2260, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 97570, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 23, ap++;
[ap + 0] = [[ap + -163] + 21], ap++;
[ap + 0] = [[ap + -164] + 22], ap++;
jmp rel 18;
ap += 117;
[ap + 0] = [[ap + -154] + 12], ap++;
call rel 2243;
[ap + 0] = [ap + -1] + 2242, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108810, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 16, ap++;
[ap + 0] = [[ap + -163] + 14], ap++;
[ap + 0] = [[ap + -164] + 15], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 136;
[ap + 0] = [[ap + -157] + 5], ap++;
call rel 2218;
[ap + 0] = [ap + -1] + 2217, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 121830, ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -168] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -170] + 7], ap++;
[ap + 0] = [[ap + -171] + 8], ap++;
ret;
ap += 146;
call rel 2196;
[ap + 0] = [ap + -1] + 2195, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 133940, ap++;
call rel 2123;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -161] + [ap + -8], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 138;
call rel 2173;
[ap + 0] = [ap + -1] + 2172, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 133050, ap++;
call rel 2003;
[ap + 0] = [ap + -165] + 3, ap++;
[ap + 0] = [ap + -160] + [ap + -8], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 154;
[ap + 0] = [[ap + -175] + 4], ap++;
call rel 2150;
[ap + 0] = [ap + -1] + 2149, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 135200, ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -185] + 8, ap++;
[ap + 0] = [[ap + -186] + 6], ap++;
[ap + 0] = [[ap + -187] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 169;
call rel 2123;
[ap + 0] = [ap + -1] + 2122, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 147660, ap++;
call rel 2059;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -184] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -191], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 161;
call rel 2100;
[ap + 0] = [ap + -1] + 2099, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 146770, ap++;
call rel 1930;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -183] + [ap + -8], ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 177;
[ap + 0] = [[ap + -188] + 4], ap++;
call rel 2077;
[ap + 0] = [ap + -1] + 2076, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 148920, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -198] + 8, ap++;
[ap + 0] = [[ap + -199] + 6], ap++;
[ap + 0] = [[ap + -200] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 195;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 2049;
[ap + 0] = [ap + -1] + 2048, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 161440, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 1500 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 1451 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1408 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -6] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1374 if [ap + -7] != 0;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + -14] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 1296 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1253 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 25 if [ap + -7] != 0;
ap += 142;
call rel 1876;
[ap + 0] = [ap + -1] + 1875, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 122710, ap++;
call rel 1821;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -157] + [ap + -8], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 297572889287913156956330015608642265349819520091339214996607100188171254991, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -37] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 1141 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1089 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 1049 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1002 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -42] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 382;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[ap + -3] = [[ap + -12] + 2];
[ap + -2] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 340 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -15] + 0], ap++;
[ap + 3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -20] + 2];
jmp rel 288 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -15] + 0];
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 199 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [ap + -32], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -24] = [ap + 1] + [ap + -50], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 113;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 89 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 47 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 380346564192000205133965993787134185706312922173221675921996348047960444127, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
jmp rel 380;
ap += 54;
[ap + 0] = [[ap + -88] + 12], ap++;
call rel 1526;
[ap + 0] = [ap + -1] + 1525, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 49280, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -97] + 16, ap++;
[ap + 0] = [[ap + -98] + 14], ap++;
[ap + 0] = [[ap + -99] + 15], ap++;
jmp rel 20;
ap += 61;
[ap + 0] = [[ap + -88] + 5], ap++;
call rel 1506;
[ap + 0] = [ap + -1] + 1505, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 60610, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -97] + 9, ap++;
[ap + 0] = [[ap + -98] + 7], ap++;
[ap + 0] = [[ap + -99] + 8], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
call rel 1480;
[ap + 0] = [ap + -1] + 1479, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71190, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74] + [ap + -2], ap++;
jmp rel 17;
ap += 66;
call rel 1464;
[ap + 0] = [ap + -1] + 1463, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71560, ap++;
[ap + 0] = [ap + -85] + 2, ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
call rel 1415;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
call rel 1438;
[ap + 0] = [ap + -1] + 1437, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71910, ap++;
call rel 1277;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 89;
[ap + 0] = [[ap + -99] + 4], ap++;
call rel 1415;
[ap + 0] = [ap + -1] + 1414, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 74620, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -109] + 8, ap++;
[ap + 0] = [[ap + -110] + 6], ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
jmp rel 48;
ap += 81;
call rel 1395;
[ap + 0] = [ap + -1] + 1394, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 83760, ap++;
call rel 1234;
[ap + 0] = [ap + -114] + 3, ap++;
[ap + 0] = [ap + -102] + [ap + -8], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 101;
[ap + 0] = [[ap + -114] + 4], ap++;
call rel 1367;
[ap + 0] = [ap + -1] + 1366, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 86470, ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -124] + 8, ap++;
[ap + 0] = [[ap + -125] + 6], ap++;
[ap + 0] = [[ap + -126] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[ap + -3] = [[ap + -12] + 2];
[ap + -2] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 566 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -15] + 0], ap++;
[ap + 3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -20] + 2];
jmp rel 514 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -15] + 0];
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 472 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 425 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [ap + -32], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -24] = [ap + 1] + [ap + -50], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 339;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 315 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 1307293875687801355414610438162386735797045965283502499596764999821861898928, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 14, ap++;
[ap + 0] = 1797897723140280419943283083585630488124897040077067800021909935799533982926, ap++;
[ap + -1] = [[ap + -83] + 0];
[ap + -130] = [[ap + -83] + 1];
[ap + 0] = [[ap + -83] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -93] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -16] = [[ap + -15] + 1];
[ap + -5] = [[ap + -15] + 2];
[ap + -6] = [[ap + -15] + 3];
[ap + -4] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 157 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = 297572889287913156956330015608642265349819520091339214996607100188171254991, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -146] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 7];
[ap + -6] = [[ap + -32] + 8];
[ap + -5] = [[ap + -32] + 9];
[ap + -7] = [[ap + -32] + 10];
[ap + -4] = [[ap + -32] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32] + 7) %}
[ap + 0] = [[ap + -32] + 13], ap++;
jmp rel 85 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -39] + 14];
[ap + -5] = [[ap + -39] + 15];
[ap + -4] = [[ap + -39] + 16];
[ap + -3] = [[ap + -39] + 17];
[ap + -2] = [[ap + -39] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -39] + 14) %}
[ap + 0] = [[ap + -39] + 20], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -40] + 19], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 896;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -61] + 21];
[ap + -2] = [[ap + -61] + 22];
[ap + -6] = [[ap + -61] + 23];
[ap + -5] = [[ap + -61] + 24];
[ap + -4] = [[ap + -61] + 25];
[ap + -3] = [[ap + -61] + 26];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -61] + 21) %}
[ap + 0] = [[ap + -61] + 28], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -62] + 27], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -66] + 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -62] + 27], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -66] + 31, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 29], ap++;
[ap + 0] = [[ap + -69] + 30], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -58] + 19], ap++;
[ap + 0] = [ap + -1] + 12720, ap++;
[ap + 0] = [ap + -60] + 23, ap++;
[ap + 0] = [[ap + -61] + 21], ap++;
[ap + 0] = [[ap + -62] + 22], ap++;
jmp rel 11;
ap += 25;
[ap + 0] = [[ap + -58] + 12], ap++;
[ap + 0] = [ap + -1] + 24050, ap++;
[ap + 0] = [ap + -60] + 16, ap++;
[ap + 0] = [[ap + -61] + 14], ap++;
[ap + 0] = [[ap + -62] + 15], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -56] + 5], ap++;
call rel 941;
[ap + 0] = [ap + -1] + 940, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36710, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -66] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 7], ap++;
[ap + 0] = [[ap + -69] + 8], ap++;
ret;
ap += 54;
[ap + 0] = [[ap + -88] + 12], ap++;
call rel 920;
[ap + 0] = [ap + -1] + 919, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 49180, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -97] + 16, ap++;
[ap + 0] = [[ap + -98] + 14], ap++;
[ap + 0] = [[ap + -99] + 15], ap++;
jmp rel 20;
ap += 61;
[ap + 0] = [[ap + -88] + 5], ap++;
call rel 900;
[ap + 0] = [ap + -1] + 899, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 60510, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -97] + 9, ap++;
[ap + 0] = [[ap + -98] + 7], ap++;
[ap + 0] = [[ap + -99] + 8], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
call rel 874;
[ap + 0] = [ap + -1] + 873, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71090, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74] + [ap + -2], ap++;
jmp rel 17;
ap += 66;
call rel 858;
[ap + 0] = [ap + -1] + 857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71460, ap++;
[ap + 0] = [ap + -85] + 2, ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
call rel 809;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
call rel 832;
[ap + 0] = [ap + -1] + 831, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 71810, ap++;
call rel 671;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 89;
[ap + 0] = [[ap + -99] + 4], ap++;
call rel 809;
[ap + 0] = [ap + -1] + 808, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 74520, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -109] + 8, ap++;
[ap + 0] = [[ap + -110] + 6], ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
jmp rel 48;
ap += 81;
call rel 789;
[ap + 0] = [ap + -1] + 788, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 83660, ap++;
call rel 628;
[ap + 0] = [ap + -114] + 3, ap++;
[ap + 0] = [ap + -102] + [ap + -8], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 101;
[ap + 0] = [[ap + -114] + 4], ap++;
call rel 761;
[ap + 0] = [ap + -1] + 760, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 86370, ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -124] + 8, ap++;
[ap + 0] = [[ap + -125] + 6], ap++;
[ap + 0] = [[ap + -126] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 96;
call rel 734;
[ap + 0] = [ap + -1] + 733, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 95780, ap++;
call rel 573;
[ap + 0] = [ap + -122] + 3, ap++;
[ap + 0] = [ap + -117] + [ap + -8], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 116;
[ap + 0] = [[ap + -125] + 4], ap++;
call rel 711;
[ap + 0] = [ap + -1] + 710, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 98490, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -135] + 8, ap++;
[ap + 0] = [[ap + -136] + 6], ap++;
[ap + 0] = [[ap + -137] + 7], ap++;
jmp rel 48;
ap += 107;
call rel 691;
[ap + 0] = [ap + -1] + 690, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 107540, ap++;
call rel 530;
[ap + 0] = [ap + -133] + 3, ap++;
[ap + 0] = [ap + -128] + [ap + -8], ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 127;
[ap + 0] = [[ap + -148] + 4], ap++;
call rel 663;
[ap + 0] = [ap + -1] + 662, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 110250, ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -158] + 8, ap++;
[ap + 0] = [[ap + -159] + 6], ap++;
[ap + 0] = [[ap + -160] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 134;
call rel 636;
[ap + 0] = [ap + -1] + 635, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 121820, ap++;
call rel 466;
[ap + 0] = [ap + -161] + 3, ap++;
[ap + 0] = [ap + -156] + [ap + -8], ap++;
[ap + 0] = [ap + -158], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 150;
[ap + 0] = [[ap + -171] + 4], ap++;
call rel 613;
[ap + 0] = [ap + -1] + 612, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 123970, ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -181] + 8, ap++;
[ap + 0] = [[ap + -182] + 6], ap++;
[ap + 0] = [[ap + -183] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 165;
call rel 586;
[ap + 0] = [ap + -1] + 585, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 136430, ap++;
call rel 522;
[ap + 0] = [ap + -180], ap++;
[ap + 0] = [ap + -180] + [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 157;
call rel 563;
[ap + 0] = [ap + -1] + 562, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 135540, ap++;
call rel 393;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -179] + [ap + -8], ap++;
[ap + 0] = [ap + -181], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 173;
[ap + 0] = [[fp + -3] + 9], ap++;
call rel 540;
[ap + 0] = [ap + -1] + 539, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 137690, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 190;
[ap + 0] = [[fp + -3] + 2], ap++;
call rel 512;
[ap + 0] = [ap + -1] + 511, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 149720, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 305 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 234;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 207 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 175 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 141 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 117 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
ap += 22;
call rel 342;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -31] + 23880, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -4] + 280, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1216729249298636368797238062632141198510729091867131409898934543796314411976, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -3] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 204;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -36] + 7];
[ap + -2] = [[ap + -36] + 8];
[ap + -6] = [[ap + -36] + 9];
[ap + -5] = [[ap + -36] + 10];
[ap + -4] = [[ap + -36] + 11];
[ap + -3] = [[ap + -36] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 7) %}
[ap + 0] = [[ap + -36] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 13], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -37] + 13], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -40] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 15], ap++;
[ap + 0] = [[ap + -43] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13180, ap++;
[ap + 0] = [ap + -40] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
ret;
ap += 26;
call rel 250;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34] + 24440, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 18;
call rel 95;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [ap + -33] + 23550, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 34;
[ap + 0] = [[ap + -49] + 4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2] + 25700, ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = [[ap + -53] + 6], ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 39;
call rel 215;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47] + 36550, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 36;
call rel 42;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -50] + 36180, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 51;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 38240, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 50270, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930490496575599150170734222081291576, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576940180048306939577043858226, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6396785288134949316111800291588441706688366, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -11];
jmp rel 29;
jmp rel 16;
[ap + 0] = 626701365406341637835658603777811143746313620068960454872121503152110594199, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[ap + 0] = 1087103541478474879879001400220721863109046731347877639004353644914990305989, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 158785849891312535761063375609231610293708730329154647083651838764126913741, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 22262504451487240676641280457586393769316, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 517209913840849255812809201082740339747880606814214195930468, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7512493202258081504817655873851885012783829769972311404, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624085075084607933104993585622903, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1489367635952064142590622936951924, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7177729436381303449077456739251539561112948, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6214289900860935150703809029490, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
